name: Deploy to Vercel

# 触发条件
on:
  # 推送到 main 分支时自动部署到生产环境
  push:
    branches:
      - main
      - master
  
  # 推送到其他分支时部署到预览环境
  pull_request:
    branches:
      - main
      - master
  
  # 手动触发
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

# 环境变量
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # 安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      
      # 获取 pnpm store 目录
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      # 设置 pnpm 缓存
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      # 安装依赖
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # 运行 ESLint
      - name: Run ESLint
        run: pnpm run lint
        continue-on-error: true
      
      # 运行测试
      - name: Run tests
        run: pnpm run test:run
        continue-on-error: true
      
      # 构建项目（用于验证）
      - name: Build project
        run: pnpm run build
        env:
          # 构建时需要的环境变量
          NUXT_PUBLIC_SITE_URL: ${{ secrets.NUXT_PUBLIC_SITE_URL || 'https://your-domain.vercel.app' }}
          NUXT_PUBLIC_SITE_NAME: ${{ secrets.NUXT_PUBLIC_SITE_NAME || 'Nuxt App' }}
          NUXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ secrets.NUXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
      
      # 安装 Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      # 拉取 Vercel 环境信息
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      # 构建项目工件
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      # 部署到预览环境
      - name: Deploy to Preview
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview')
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview URL: $url"
          echo "PREVIEW_URL=$url" >> $GITHUB_ENV
      
      # 部署到生产环境
      - name: Deploy to Production
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production URL: $url"
          echo "PRODUCTION_URL=$url" >> $GITHUB_ENV
      
      # 添加 PR 评论（预览部署）
      - name: Comment PR (Preview)
        if: github.event_name == 'pull_request' && env.PREVIEW_URL
        uses: actions/github-script@v7
        with:
          script: |
            const { PREVIEW_URL } = process.env;
            
            const comment = `## 🚀 预览部署成功！
            
            **预览 URL**: ${PREVIEW_URL}
            
            ### 📋 检查清单
            - [ ] 网站正常加载
            - [ ] Cookie 同意横幅显示
            - [ ] Google Analytics 功能正常
            - [ ] OAuth 登录功能正常
            - [ ] PWA 功能正常
            - [ ] 国际化切换正常
            - [ ] 主题切换正常
            
            ### 🔍 性能检查
            - [PageSpeed Insights](https://pagespeed.web.dev/analysis?url=${encodeURIComponent(PREVIEW_URL)})
            - [GTmetrix](https://gtmetrix.com/analyze.html?url=${encodeURIComponent(PREVIEW_URL)})
            
            ---
            *此评论由 GitHub Actions 自动生成*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      # 创建部署状态
      - name: Create Deployment Status
        if: env.PREVIEW_URL || env.PRODUCTION_URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = process.env.PREVIEW_URL || process.env.PRODUCTION_URL;
            const environment = process.env.PREVIEW_URL ? 'preview' : 'production';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: url,
              description: `部署到 ${environment} 环境成功`,
              auto_inactive: false
            });
  
  # 性能检查任务（可选）
  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 30
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ env.PREVIEW_URL }}
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true